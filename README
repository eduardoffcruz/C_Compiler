============================C Compiler=========================
_______________________________________________________________
In this Project we developed a Compiler for a subset of the C Language (standard C99), which we named 'UC Language'.
UC Language includes the use of variables and literals of type char, short, int, and double. It also includes arithmetic and logical operations, assignment statements, relational operators and flow control statements. It supports functions with the data types mencioned above, with pass-by-value paramentes only. The absence of parameters or/and return value should always be fulfilled with the void keyword. The UC Language programs can make use of the getchar() and putchar() functions to read and write characters from/to the terminal. The meaning of a program in UC Language will be the same as in C99. 
Examples of programs are available in Examples folder. 
________________________________________________________________

HOW TO:
	+Compile the UC Compiler:
		\_Open Terminal in C_Compiler folder
		  > ./compile uccompiler
		  This command will generate the Compiler executable named 'uccompiler'
	+Compile a program using uccompiler:
		\_Open Terminal in C_Compiler folder
		 > uccompiler < program.c > program.ll
		 In this command, uccompiler receives program.c as input,
		  and outputs the respective llvm code if no lexical, sintatic 
		  or semantic errors are detected. 
		  
	+You can run uccompiler using different flags or none (as presented above):
		-l -> lexical analysis only, stdout tokens and error messages.
		-e1 -> lexical analysis only, stdout error messages.
		-t -> lexical and sintax analysis, print Abstract Sintax Tree (AST) if no sintatic errors occured, else stdout errors
		-e2 -> lexical and sintax analysis, stdout errors
		-s -> lexical, sintax and semantic analysis, print Symbol Table and Annotated AST, stdout errors
		-e3 -> lexical, sintax and semantic analysis, stdout errors
		
		-----> IF NO FLAG IS USED, LEXICAL, SINTAX, AND SEMANTIC ANALYSIS ARE PERFORMED, if no error is encountered, LLVM CODE IS GENERATED to the stdout.
			 
	+Executing UC Language programs after Compiling:
		\_After generating the LLVM code you're able to execute the outputted .ll files using:
		> lli program.ll 
		'program' should be replaced with the program name.
		You can performe other types of operations such as generating Assembly machine code from the .ll file, etc...
		
		The LLVM code generated by the compiler isn't optimized!	  

 Note: Make sure you have gcc, lex, yacc, and llvm installed	
-----------------------------------------------------------------
Developed by 							 
	Eduardo F. F. Cruz	-	eduardoffcruz@gmail.com
	Rodrigo Sobral	-	rodrigosobral@sapo.pt
-----------------------------------------------------------------

===============================@2020=============================
